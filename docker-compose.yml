version: '3.8'
services:
  app:
    container_name: nestjs_sandbox
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '${APP_PORT}:3000'
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - default
    restart: unless-stopped
    command: ['node', 'dist/main.js']
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3000/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '256M'

  postgres:
    container_name: postgres
    image: postgres:17
    ports:
      - '${POSTGRES_PORT}:5432'
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - default
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: '128M'

  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./default.conf.template:/etc/nginx/templates/default.conf.template:ro
      - '/var/log/nginx:/var/log/nginx'
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - app
    environment:
      - APP_PORT
      - DOMAIN
    networks:
      - default
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: '64M'

networks:
  default:
    name: ${NETWORK_NAME}

volumes:
  postgres_data:
  certs:
    external: false
